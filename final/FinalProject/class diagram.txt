class Program
	string MainMenu()
	string LoadGame()
	void GameLoader()
	void HeroTurn()
	void VillainTurn()
	string ScenarioSelector()
	string MenuReader(string title, List<string>)
	void Countdown(int start)
	
class abstract Character
	protected string _name;
	int _hP;
	int _pla;
	int _atk;
	public Character(string name, int hP, int pla, int atk, string spe)
	protected string _spe;
	public virtual string GetName()
	public int GetHP()
	public int GetPla()
	public int GetAtk()
	public virtual string GetSpe()

class Hero : Character
	int _def;
	string _nameAlter;
	int _rec;
	int _handSize;
	int _altHandSize;
	string _altSpe;
	bool _isHero;
	bool _isDead;

	public Hero(string name, int hP, int pla, int atk, string spe, int def, string nameAlter, int rec, int handSize, int altHandSize, string alterSpe) : base(name, hP, pla, atk, spe)

	public override string GetName()
	public override string GetSpe()
	public void Change()
	public void CheckDeath()
	public void ClassBuilder(all data)
	public void UpdateHP(int damage)

class Villain : Character
	int _phase;
	bool _isDead;

	public Villain(string name, int hP, int pla, int atk, string spe, string difficulty) : base(name, hP, pla, atk, spe)

	public void ChangePhase()
	public void CheckDeath()
	public void UpdateHP(int damage)
	private void ChangePhaseStats()
	public void ClassBuilder(all data)

class Scenario
	string _name;
	string _module;
	string _difficulty;
	int _threat;
	int _startThreat;
	int _roundThreat;

	public Scenario(string name, string mod, string dif, int thr, int startThr, int roundThr)

	public void UpdateThreat()
	public void CheckThreatComplete()
	public void ClassBuilder(all data)
